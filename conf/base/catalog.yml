# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://docs.kedro.org/en/stable/data/data_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataset
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataset
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataset
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different Dataset implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://docs.kedro.org/en/stable/data/data_catalog.html

meteorite_landings:
  type: pandas.ParquetDataset
  filepath: data/01_raw/meteorite-landings.parquet

neo_v2:
  type: pandas.ParquetDataset
  filepath: data/01_raw/neo_v2.parquet

neo:
  type: pandas.ParquetDataset
  filepath: data/01_raw/neo.parquet


#
preprocessed_meteorites:
  type: pandas.ParquetDataset
  filepath: data/02_intermediate/preprocessed_meteorites.parquet

preprocessed_neo:
  type: pandas.ParquetDataset
  filepath: data/02_intermediate/preprocessed_neo.parquet

preprocessed_neo_v2:
  type: pandas.ParquetDataset
  filepath: data/02_intermediate/preprocessed_neo_v2.parquet

meteorites_by_year:
  type: pandas.ParquetDataset
  filepath: data/02_intermediate/meteorites_by_year.parquet



model_input_table:
  type: pandas.ParquetDataset
  filepath: data/03_primary/model_input_table.parquet

neo_clean:
  type: pandas.ParquetDataset
  filepath: data/03_primary/neo_clean.parquet

meteorites_clean:
  type: pandas.ParquetDataset
  filepath: data/03_primary/meteorites_clean.parquet



#
pca_features:
  type: pandas.ParquetDataset
  filepath: data/04_feature/pca_features.parquet



X_train:
  type: pandas.ParquetDataset
  filepath: data/05_model_input/X_train.parquet

X_test:
  type: pandas.ParquetDataset
  filepath: data/05_model_input/X_test.parquet

y_train:
  type: pandas.ParquetDataset
  filepath: data/05_model_input/y_train.parquet

y_test:
  type: pandas.ParquetDataset
  filepath: data/05_model_input/y_test.parquet


X_train_reg:
  type: pandas.ParquetDataset
  filepath: data/05_model_input/X_train_reg.parquet

X_test_reg:
  type: pandas.ParquetDataset
  filepath: data/05_model_input/X_test_reg.parquet

y_train_reg:
  type: pandas.ParquetDataset
  filepath: data/05_model_input/y_train_reg.parquet

y_test_reg:
  type: pandas.ParquetDataset
  filepath: data/05_model_input/y_test_reg.parquet

reg_cols:
  type: json.JSONDataset
  filepath: data/05_model_input/reg_cols.json


asteroid_model:
  type: pickle.PickleDataset
  filepath: data/06_models/asteroid_model.pkl
  versioned: true

hazardous_clf:
  type: pickle.PickleDataset
  filepath: data/06_models/hazardous_clf.pkl
  versioned: true

best_regressor:
  type: pickle.PickleDataset
  filepath: data/06_models/best_regressor.pkl
  versioned: true

kmeans_model:
  type: pickle.PickleDataset
  filepath: data/06_models/kmeans_model.pkl
  versioned: true

pca_model:
  type: pickle.PickleDataset
  filepath: data/06_models/pca_model.pkl
  versioned: true


model_output:
  type: pandas.ParquetDataset
  filepath: data/07_model_output/model_output.parquet

y_pred:
  type: pandas.ParquetDataset
  filepath: data/07_model_output/y_pred.parquet

y_pred_reg:
  type: pandas.ParquetDataset
  filepath: data/07_model_output/y_pred_reg.parquet

clf_cv_results:
  type: pandas.CSVDataset
  filepath: data/07_model_output/clf_cv_results.csv
  save_args: { index: false }

reg_cv_results:
  type: pandas.CSVDataset
  filepath: data/07_model_output/reg_cv_results.csv
  save_args: { index: false }

final_predictions:
  type: pandas.ParquetDataset
  filepath: data/07_model_output/final_predictions.parquet



report_neo_summary:
  type: pandas.CSVDataset
  filepath: data/08_reporting/report_neo_summary.csv
  save_args: { index: false }

report_meteorites_summary:
  type: pandas.CSVDataset
  filepath: data/08_reporting/report_meteorites_summary.csv
  save_args: { index: false }

pca_kmeans_report:
  type: pandas.CSVDataset
  filepath: data/08_reporting/pca_kmeans_report.csv
  save_args: { index: false }

clf_results_table:
  type: pandas.CSVDataset
  filepath: data/08_reporting/clf_results_table.csv
  save_args: { index: false }

reg_results_table:
  type: pandas.CSVDataset
  filepath: data/08_reporting/reg_results_table.csv
  save_args: { index: false }

final_eval_metrics:
  type: pandas.CSVDataset
  filepath: data/08_reporting/final_eval_metrics.csv
  save_args: { index: false }

final_confusion:
  type: pandas.CSVDataset
  filepath: data/08_reporting/final_confusion_matrix.csv
  save_args: { index: true }

final_roc_curve:
  type: pandas.CSVDataset
  filepath: data/08_reporting/final_roc_curve.csv
  save_args: { index: false }

final_classification_report:
  type: pandas.CSVDataset
  filepath: data/08_reporting/final_classification_report.csv
  save_args: { index: false }

classification_report:
  type: pandas.CSVDataset
  filepath: data/08_reporting/classification_report.csv
  save_args: { index: false }



confusion_matrix_plot:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/confusion_matrix.png

roc_curve_plot:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/roc_curve.png

cv_bars_plot:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/cv_bars.png
